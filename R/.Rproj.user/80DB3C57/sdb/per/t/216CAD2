{
    "contents" : "##########################################################################################\n# Date: November, 2012\n# Authors: Tina Cormier \n# Purpose: Habitat suitability mapping using random forest\n#\n##########################################################################################\n\n#Load libraries\nrequire(maptools)\nrequire(randomForest)\nrequire(raster)\nrequire(foreign)\nrequire(rgdal)\n#require(biomod2)\n#\n#############################  SET VARIABLES HERE TO RUN MANUALLY #########################\n#\n# #\n# #Response Image - reference image\n# res.img <- 'C:/Share/LCC-VP/Parks/GRSM/analysis/spruce_fir/inputs/clim_srad/COVER_Spruce_fir_inPRISM_800m.tif'\n# \n# #Variable Stack\n# v.stk <- 'C:/Share/LCC-VP/Parks/GRSM/analysis/spruce_fir/inputs/clim_srad/biovars_1981-2010_srad_masked.tif'\n#\n# #Text file containing variable names.  Names should be listed\n# #in text file - each name on a separate line and in quotes.  They should \n# #be in the same order as they appear in v.stk and be the same length \n# #(# bands = # lines in text file).\n# #Example file: C:/Share/LCC-VP/Parks/misc/DEWA_var_names.txt\n# var.names <- \"C:/Share/LCC-VP/Parks/GRSM/analysis/common_inputs/GRSM_var_names_clim_srad.txt\"\n# \n# #Do you want to predict an output map layer? Answer Y or N.\n# map <- \"Y\"\n# \n# #Path/directory where output data will be stored.\n# outDir <- 'C:/Share/LCC-VP/parks/GRSM/analysis/Spruce_fir/outputs/clim_srad/'\n# \n# #model name (usually spp name)\n# mod.name <- \"Spruce_fir\"\n#\n# #Class name (as listed in attribute table of original classification)\n# class.name <- \"Spruce-fir forest\"\n#\n################## UNCOMMENT THIS TO CALL FROM PYTHON OR OTHER SCRIPT#####################\n#\n#Get the parameter file from the supplied argument\nparamfile <- commandArgs(trailingOnly=TRUE)\n#for testing:\n#paramfile <- \"C:/Share/LCC-VP/Parks/DEWA/analysis/EasternHemlock_NHF/inputs/EasternHemlock_NHF_R_params.txt\"\n\n# This script can be called by either LCC-VP_model_prep.py or run on it's own (would source R param file).\n# If script is called by python, param file will be with it (and length of paramfile will will be > 0). \n# If calling from R, length of paramfile variable will be 0, so source R parameters file. \nif (length(paramfile) == 0) {\n  #source R parameter file (LCC-VP_parameters.R)\n  source(\"C:/Share/LCC-VP/scripts/R/LCC-VP_parameters.R\")\n} else {\n    source(paramfile)\n  }#end if.\n\n##########################################################################################\n#set up logfile\n# redirect output to file (for selected variables)\ndate <- gsub(\":\", \"\", gsub(\" \", \"_\", date()))\nlog.file <- file(paste(outDir,\"sdm_RF_\", date, \"_log.txt\",sep=\"\"))\nsink(log.file)\nsink(log.file, type=\"message\")\nprint(\"*********************************************************************\")\nprint(\"************** LCC-VP_sdm_RF.R Log *************\")\nprint(\"*********************************************************************\")\n\nprint(date)\nprint(paste(\"Training/response image = \", res.img, sep=\"\"))\nprint(paste(\"Variable stack = \", v.stk, sep=\"\"))\nprint(paste(\"list of variable names is in this txt file \", var.names, sep=\"\"))\nprint(paste(\"Do you want a map = \", map, sep=\"\"))\nprint(paste(\"Output directory = \", outDir, sep=\"\"))\nprint(paste(\"Ecological System modeled = \", mod.name, sep=\"\"))\n\n#\n################# VARIABLE NAMES #######################\n\n# Text file containing variable names.  Names should be listed\n# in text file - each name on a separate line and in quotes.  They should \n# be in the same order as they appear in v.stk and be the same length \n# (# bands = # lines in text file).\nvar.names <- read.table(var.names, sep=\"\\n\")[,1]\n\n# b1 <- \"Annual Mean Temperature\"\n# b2 <- \"Mean Diurnal Range\"\n# b3 <- \"Isothermality\"\n# b4 <- \"Temperature Seasonality\"\n# b5 <- \"Max Temperature of Warmest Month\"\n# b6 <- \"Min Temperature of Coldest Month\"\n# b7 <- \"Temperature Annual Range\"\n# b8 <- \"Mean Temperature of Wettest Quarter\"\n# b9 <- \"Mean Temperature of Driest Quarter\"\n# b10 <- \"Mean Temperature of Warmest Quarter\"\n# b11 <- \"Mean Temperature of Coldest Quarter\"\n# b12 <- \"Annual Precipitation\"\n# b13 <- \"Precipitation of Wettest Month\"\n# b14 <- \"Precipitation of Driest Month\"\n# b15 <- \"Precipitation Seasonality\"\n# b16 <- \"Precipitation of Wettest Quarter\"\n# b17 <- \"Precipitation of Driest Quarter\"\n# b18 <- \"Precipitation of Warmest Quarter\"\n# b19 <- \"Precipitation of Coldest Quarter\"\n\n# Check that number of bands in v.stk = # of lines in text file\n# If yes, run script. If not, error.\nb <- GDALinfo(v.stk)[3]\nnum.names <- length(var.names)\n\nif (b == num.names) {\n  \n  #####################################################\n  \n  # Naming the output images by manipulating res.img\n  outImage <- paste(sub(\"inPRISM_800m.tif\", \"\", sub(\"COVER_\", \"\", sub(\"inputs\", \"outputs\", res.img))),\"current_suitability_rf.tif\", sep=\"\")\n  diffImage <- paste(sub(\"inPRISM_800m.tif\", \"\", sub(\"COVER_\", \"\", sub(\"inputs\", \"outputs\", res.img))),\"modeled_suitability_minus_ref_rf.tif\", sep=\"\")\n  \n  # Load the response raster. \n  print(paste(\"loading response raster for \", mod.name, sep=\"\"))\n  r.img <- getValues(raster(res.img))\n  r.out <- r.img\n  r.diff <- r.img\n  \n  # Load predictor stack\n  print(paste(\"loading predictor stack for \", mod.name, sep=\"\"))\n  pred.stk <- as.data.frame(getValues(brick(v.stk)))\n  names(pred.stk) <- var.names\n  \n  #Use suitability image as a mask for NAs - has exact extent of valid data we want.\n  #Also make sure suitability and preds have same length before applying mask.\n  if (length(r.img) == dim(pred.stk)[1]) {\n    #Set pred.stk to NA where r.img is NA\n    pred.stk[is.na(r.img),] <- NA\n    #Now make reverse NA mask with pred.stk and use it to mask r.img - ensures no NAs in model data, so avoids errors\n    #due to dimensions and positions of NAs.\n    #Build composite vector of NAs from every band in pred.stk\n    pred.mask <- as.vector(1:length(r.img))\n    for (i in 1:ncol(pred.stk)) {\n      pred.mask[is.na(pred.stk[,i])] <- NA\n     } #end for\n    \n    #Now mask r.img with pred.mask\n    r.img[is.na(pred.mask)] <- NA\n    \n    pred.na <- is.na(pred.mask)\n    r.na <- is.na(r.img)\n  \n  \n    #Only run the rest of the code IF response image and predictor stack have identical\n    #dimensions and positions of NA values.\n    if (identical(r.na, pred.na)) {\n      \n      #If they match, remove NAs\n      r.img <- na.omit(r.img)\n      pred.stk <- na.omit(pred.stk)\n      \n      # Run Random Forest classification algorithm\n      print(paste(\"computing random forest model. . .\"))\n      randfor <- randomForest(pred.stk, r.img)\n      \n      # View classification results.\n      randfor\n      \n      # View variable importance plot.\n      #varImpPlot(randfor)\n      \n      #save rf model for later :)\n      rf.mod <- paste(outDir,\"rf_model_\", mod.name, \".RData\", sep=\"\")\n      save(randfor, file= rf.mod)\n      \n      ############### Model output summary files ############################\n      # Plotting parameters\n      str <- 1\n      dpi <- 400\n      \n      # Variable Importance Plot.\n      pdf(file=paste(outDir,\"rf_varImp_\", mod.name, \".pdf\", sep=\"\"),family=\"Times\")\n      varImpPlot(randfor, pch=16, col=\"blue\",main=paste(\"Variable Importance - \", class.name, sep=' '))\n      dev.off()\n      \n      # redirect output to file (for selected variables)\n      sink(file=paste(outDir,\"rf_model_results_\", mod.name, \".txt\",sep=\"\"))\n      print(paste(\"***********************************************************************\", sep=\"\"))\n      print(paste(\"************** randomForest model results - \", mod.name,\" *************\", sep=\"\"))\n      print(paste(\"***********************************************************************\", sep=\"\"))\n      print(randfor)\n      #turn off output to file\n      sink()\n      \n      ################### Habitat Suitability Map Generation ######################\n      \n      #Do you want to predict an output image (Y or N)? Set \"map\" variable at top of script. \n      if (map==\"Y\" | map == \"y\") {\n        # Prediction\n        # Detach the raster package because we want to use the randomForest version of \n        # predict, instead of the \"raster\" version.\n        detach(\"package:raster\")\n        pred <- predict(randfor, pred.stk)\n        r.out[is.na(pred.mask) == F] <- pred\n        \n        diff <- pred - r.img\n        r.diff[is.na(pred.mask) == F] <- diff\n        \n        # Write the output raster maps.\n        # Reload the dismo and raster package.\n        require(raster)\n        print(\"Writing output raster\")\n        \n        # Create the output suitability map.\n        img.out <- raster(res.img)\n        img.out <- setValues(img.out, round(r.out, digits=0))\n        writeRaster(img.out, filename=outImage, format=\"GTiff\", dataType=\"INT1U\", overwrite=T)\n        \n        # Create diff raster.\n        img.diff <- raster(res.img)\n        img.diff <- setValues(img.diff, round(r.diff, digits=0))\n        writeRaster(img.diff, filename=diffImage, format=\"GTiff\", dataType=\"INT1S\", overwrite=T)\n      } #End if\n      \n    } else {\n      print(\"ERROR: response image and predictor stack do not exactly match in positions of NA values\")\n    }\n  } else {\n    print(\"ERROR: Response image and predictor stack do not exactly match in dimensions\")\n  }\n} else {\n    print(\"ERROR, number of bands in variable stack does not equal number of names in variable list.\")\n}# end if \n\n#Detach packages\ndetach(\"package:maptools\")\ndetach(\"package:randomForest\")\ndetach(\"package:raster\")\ndetach(\"package:foreign\")\ndetach(\"package:rgdal\")\n\n \n",
    "created" : 1367261361747.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1327776137",
    "id" : "216CAD2",
    "lastKnownWriteTime" : 1365624700,
    "path" : "C:/Share/LCC-VP/scripts/R/LCC-VP_sdm_RF.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}